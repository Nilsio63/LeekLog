@page "/sessions/new"
@inject IUserAuthService _userAuthService
@inject IExerciseService _exerciseService
@inject IGymSessionService _gymSessionService
@inject ISnackbar _snackBar
@inject IDialogService _dialogService
@inject NavigationManager _navManager

<PageTitle>New session</PageTitle>

<MudStack Row="true">
    <MudText Typo="Typo.h3">New session</MudText>
    <MudSpacer />
    <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="SaveAsync" />
</MudStack>

<MudForm Model="Session">
    <MudGrid>
        <MudItem xs="12" md="4">
            <MudDatePicker @bind-Value="Session.Date" DateChanged="d => Session.Date = DateOnly.FromDateTime(d ?? DateTime.Today)" Label="Session date" />
        </MudItem>
        <MudItem xs="12" md="4">
            <MudTextField T="TimeSpan?" @bind-Value="Session.Duration" Mask="@(new PatternMask("00:00:00"))" Label="Duration" />
        </MudItem>
        <MudItem xs="12" md="4">
            <MudNumericField @bind-Value="Session.AverageHeartRate" Label="Average heart rate" />
        </MudItem>

        @foreach (SessionExerciseEntity exercise in Session.Exercises.OrderBy(o => o.Order))
        {
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Color="Color.Tertiary">@exercise.Exercise?.Title</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="() => RemoveExercise(exercise)" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @foreach (WorkoutSetEntity set in exercise.Sets)
                        {
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudNumericField @bind-Value="set.UsedWeight" Label="Weight (kg)" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudStack Row="true" AlignItems="AlignItems.Stretch">
                                        <MudNumericField HelperText="@GetAdditionalRepCountText(set)" @bind-Value="set.CleanRepetitions" Label="Clean reps" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Ballot" Color="Color.Primary" OnClick="() => OpenRepitionsDetailDialog(set)" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="() => RemoveSet(exercise, set)" />
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        }
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddSet(exercise)">Add set</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }

        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddExercise">Add exercise</MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    public GymSessionEntity Session { get; set; } = new();
    public List<ExerciseEntity> AllExercises { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        UserEntity? user = await _userAuthService.GetCurrentUserAsync();

        if (user is null)
        {
            _navManager.NavigateTo("/");

            return;
        }

        Session = new GymSessionEntity
            {
                UserId = user.Id,
                Date = DateOnly.FromDateTime(DateTime.Today)
            };

        AllExercises = (await _exerciseService.GetAllAsync()).OrderBy(o => o.Title).ToList();
    }

    private string GetAdditionalRepCountText(WorkoutSetEntity set)
    {
        List<string> additionalRepTexts = new();

        if (set.UncleanRepetitions > 0)
        {
            additionalRepTexts.Add($"+{set.UncleanRepetitions} unclean");
        }
        if (set.FailedRepetitions > 0)
        {
            additionalRepTexts.Add($"+{set.FailedRepetitions} failed");
        }
        if (set.PartialRepetitions > 0)
        {
            additionalRepTexts.Add($"+{set.PartialRepetitions} partials");
        }
        if (set.NegativeRepetitions > 0)
        {
            additionalRepTexts.Add($"+{set.NegativeRepetitions} negatives");
        }

        return string.Join(" ", additionalRepTexts);
    }

    private async Task SaveAsync()
    {
        foreach (SessionExerciseEntity exercise in Session.Exercises)
        {
            exercise.ExerciseId = exercise.Exercise.Id;
            exercise.Exercise = null!;
        }

        await _gymSessionService.SaveAsync(Session);

        _snackBar.Add("Session saved successfully", Severity.Success);

        _navManager.NavigateTo($"/sessions/details/{Session.Id}");
    }

    private async Task AddExercise()
    {
        DialogParameters<ExerciseSelectionDialog> parameters = new() { { o => o.Exercises, AllExercises } };

        IDialogReference dialog = await _dialogService.ShowAsync<ExerciseSelectionDialog>("Select exercise", parameters);

        ExerciseEntity? selectedExercise = await dialog.GetReturnValueAsync<ExerciseEntity?>();

        if (selectedExercise is not null)
        {
            SessionExerciseEntity sessionExercise = new()
                {
                    Order = int.MaxValue,
                    Exercise = selectedExercise
                };

            Session.Exercises.Add(sessionExercise);

            CalculateExerciseOrders();

            AddSet(sessionExercise);
        }
    }

    private void AddSet(SessionExerciseEntity exercise)
    {
        WorkoutSetEntity? lastSet = exercise.Sets.OrderByDescending(o => o.Order).FirstOrDefault();

        WorkoutSetEntity newSet = new WorkoutSetEntity { Order = int.MaxValue };

        if (lastSet is not null)
        {
            newSet.CleanRepetitions = lastSet.CleanRepetitions;
            newSet.UsedWeight = lastSet.UsedWeight;
        }

        exercise.Sets.Add(newSet);

        CalculateSetOrders(exercise);

        StateHasChanged();
    }

    private async Task OpenRepitionsDetailDialog(WorkoutSetEntity set)
    {
        DialogParameters<ExtendedRepetitionsEditDialog> parameters = new() { { o => o.WorkoutSet, set } };

        IDialogReference dialog = await _dialogService.ShowAsync<ExtendedRepetitionsEditDialog>("Edit repetitions", parameters);

        WorkoutSetEntity? editedSet = await dialog.GetReturnValueAsync<WorkoutSetEntity?>();

        if (editedSet is not null)
        {
            StateHasChanged();
        }
    }

    private void CalculateExerciseOrders()
    {
        SessionExerciseEntity[] orderedExercises = Session.Exercises.OrderBy(o => o.Order).ToArray();

        int orderRunner = 0;

        foreach (SessionExerciseEntity exercise in orderedExercises)
        {
            exercise.Order = orderRunner++;
        }
    }

    private void CalculateSetOrders(SessionExerciseEntity exercise)
    {
        WorkoutSetEntity[] orderedSets = exercise.Sets.OrderBy(o => o.Order).ToArray();

        int orderRunner = 0;

        foreach (WorkoutSetEntity set in orderedSets)
        {
            set.Order = orderRunner++;
        }
    }

    private void RemoveExercise(SessionExerciseEntity exercise)
    {
        Session.Exercises.Remove(exercise);

        CalculateExerciseOrders();

        StateHasChanged();
    }

    private void RemoveSet(SessionExerciseEntity exercise, WorkoutSetEntity set)
    {
        exercise.Sets.Remove(set);

        CalculateSetOrders(exercise);

        StateHasChanged();
    }
}

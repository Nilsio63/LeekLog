@page "/sessions"
@inject IUserAuthService _userAuthService
@inject IGymSessionService _gymSessionService
@inject IDialogService _dialogService
@inject ISnackbar _snackBar
@inject NavigationManager _navManager

<PageTitle>Sessions</PageTitle>

<LeekLoadingOverlay IsLoading="_isLoading">
    <MudText Typo="Typo.h3">My gym sessions</MudText>

    <MudGrid>
        @if (User is not null)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle1">Hey @User.UserName, here are your workouts.</MudText>
            </MudItem>

            @foreach (GymSessionEntity session in Sessions.OrderByDescending(o => o.Date))
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Class="mud-height-full">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row="true">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Color="Color.Tertiary" />
                                    <MudText Typo="Typo.body1" Color="Color.Tertiary">@session.Date.ToString("d")</MudText>
                                </MudStack>
                                @if (session.Duration.HasValue)
                                {
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Color="Color.Tertiary" />
                                        <MudText Typo="Typo.body2" Color="Color.Tertiary">@session.Duration.Value.ToString("c")</MudText>
                                    </MudStack>
                                }
                                @if (session.AverageHeartRate.HasValue)
                                {
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.MonitorHeart" Size="Size.Small" Color="Color.Tertiary" />
                                        <MudText Typo="Typo.body2" Color="Color.Tertiary">@session.AverageHeartRate</MudText>
                                    </MudStack>
                                }
                                <MudStack Row="true">
                                    <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" Size="Size.Small" Color="Color.Tertiary" />
                                    <MudText Typo="Typo.body2" Color="Color.Tertiary">@CalculateTotalVolume(session).ToString("N0") kg</MudText>
                                </MudStack>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudTooltip Text="View session details">
                                    <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Tertiary" OnClick="() => OpenDetails(session)" />
                                </MudTooltip>
                                <MudTooltip Text="Delete session">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="() => DeleteAsync(session)" />
                                </MudTooltip>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            @foreach (SessionExerciseEntity exercise in session.Exercises.OrderBy(o => o.Order))
                            {
                                <MudText Typo="Typo.body2">@exercise.Exercise.Title: @exercise.Sets.Count Sets</MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }

            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenNewExercise">New</MudButton>
            </MudItem>
        }
    </MudGrid>
</LeekLoadingOverlay>

@code {
    private bool _isLoading = false;

    public UserEntity? User { get; set; }
    public List<GymSessionEntity> Sessions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        UserEntity? currentUser = await _userAuthService.GetCurrentUserAsync();

        if (currentUser is null)
        {
            _navManager.NavigateTo("/");

            return;
        }

        User = currentUser;

        Sessions = await _gymSessionService.GetAllByUserIdAsync(User.Id.ToString());

        _isLoading = false;
    }

    private async Task DeleteAsync(GymSessionEntity entity)
    {
        bool? dialogResult = await _dialogService.ShowMessageBox(
            "Warning",
            $"Do you really want to delete your session from {entity.Date:d}?",
            yesText: "Delete",
            cancelText: "No");

        if (dialogResult == true)
        {
            await _gymSessionService.DeleteAsync(entity.Id);

            _snackBar.Add("Session successfully deleted", Severity.Success);

            Sessions.Remove(entity);
        }
    }

    private double CalculateTotalVolume(GymSessionEntity session)
    {
        return session.Exercises.Sum(exercise => exercise.Sets.Sum(set => set.CleanRepetitions * set.UsedWeight));
    }

    public void OpenDetails(GymSessionEntity session)
    {
        _navManager.NavigateTo($"sessions/details/{session.Id}");
    }

    public void OpenNewExercise()
    {
        _navManager.NavigateTo("sessions/new");
    }
}

@page "/sessions"
@using LeekLog.Abstractions.Entites;
@using LeekLog.Authentication;
@using LeekLog.Services.Abstractions;
@inject IUserAuthService _userAuthService
@inject IGymSessionService _gymSessionService
@inject NavigationManager _navManager

<PageTitle>Sessions</PageTitle>

<MudText Typo="Typo.h3">My gym sessions</MudText>

<MudGrid>
    @if (User is not null)
    {
        <MudItem xs="12">
            <MudText Typo="Typo.subtitle1">Hey @User.UserName, here are your workouts.</MudText>
        </MudItem>

        @foreach (GymSessionEntity session in Sessions.OrderByDescending(o => o.Date))
        {
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Class="pa-4">
                    <MudStack>
                        <MudText Typo="Typo.body1">@session.Date.ToString("d")</MudText>
                        @foreach (SessionExerciseEntity exercise in session.Exercises.OrderBy(o => o.Order))
                        {
                            <MudText Typo="Typo.body2">@exercise.Exercise.Title: @exercise.Sets.Count Sets</MudText>
                        }
                    </MudStack>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    public UserEntity? User { get; set; }
    public List<GymSessionEntity> Sessions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        UserEntity? currentUser = await _userAuthService.GetCurrentUserAsync();

        if (currentUser is null)
        {
            _navManager.NavigateTo("/");

            return;
        }

        User = currentUser;

        Sessions = await _gymSessionService.GetAllByUserIdAsync(User.Id.ToString());
    }
}

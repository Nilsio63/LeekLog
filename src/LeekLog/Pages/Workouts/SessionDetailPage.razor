@page "/sessions/details/{SessionId}"
@inject IGymSessionService _gymSessionService

<PageTitle>Session details</PageTitle>

<LeekLoadingOverlay IsLoading="_isLoading">
    @if (Session is null)
    {
        <MudText Typo="Typo.h3">Session???</MudText>

        <MudAlert Severity="Severity.Warning">Session could not be found!</MudAlert>
    }
    else
    {
        <MudText Typo="Typo.h3">Session from @Session.Date.ToLongDateString()</MudText>

        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle1">You completed a total of @Session.Exercises.Count exercises on that day!</MudText>
                @if (Session.Duration.HasValue)
                {
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.Timer" />
                        <MudText Typo="Typo.subtitle1">Duration: @Session.Duration.Value.ToString("c")</MudText>
                    </MudStack>
                }
                @if (Session.AverageHeartRate.HasValue)
                {
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.MonitorHeart" />
                        <MudText Typo="Typo.subtitle1">Avg. heart rate: @Session.AverageHeartRate</MudText>
                    </MudStack>
                }
            </MudItem>

            @foreach (SessionExerciseEntity exercise in Session.Exercises.OrderBy(o => o.Order))
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="mud-height-full">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Color="Color.Tertiary">@exercise.Exercise.Title</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @foreach (WorkoutSetEntity workoutSet in exercise.Sets.OrderBy(o => o.Order))
                            {
                                <MudText>@GetWorkoutSetDisplayText(workoutSet)</MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</LeekLoadingOverlay>

@code {
    private bool _isLoading = false;

    [Parameter]
    public string SessionId { get; set; } = string.Empty;

    public GymSessionEntity? Session { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        Session = await _gymSessionService.GetByIdAsync(SessionId);

        _isLoading = false;
    }

    private string GetWorkoutSetDisplayText(WorkoutSetEntity set)
    {
        List<string> additionalRepTexts = new();

        if (set.UncleanRepetitions > 0)
        {
            additionalRepTexts.Add($"+{set.UncleanRepetitions} unclean");
        }
        if (set.FailedRepetitions > 0)
        {
            additionalRepTexts.Add($"+{set.FailedRepetitions} failed");
        }
        if (set.PartialRepetitions > 0)
        {
            additionalRepTexts.Add($"+{set.PartialRepetitions} partials");
        }
        if (set.NegativeRepetitions > 0)
        {
            additionalRepTexts.Add($"+{set.NegativeRepetitions} negatives");
        }

        string additionalReps = string.Join(" ", additionalRepTexts);

        return $"{set.UsedWeight}kg x {set.CleanRepetitions} {additionalReps}".Trim();
    }
}

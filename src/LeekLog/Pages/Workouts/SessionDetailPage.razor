@page "/sessions/details/{SessionId}"
@inject IGymSessionService _gymSessionService

<PageTitle>Session details</PageTitle>

@if (Session is null)
{
    <MudText Typo="Typo.h3">Session???</MudText>

    <MudAlert Severity="Severity.Warning">Session could not be found!</MudAlert>
}
else
{
    <MudText Typo="Typo.h3">Session from @Session.Date.ToLongDateString()</MudText>

    <MudGrid>
        @foreach (SessionExerciseEntity exercise in Session.Exercises.OrderBy(o => o.Order))
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6" Color="Color.Tertiary">@exercise.Exercise.Title</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @foreach (WorkoutSetEntity workoutSet in exercise.Sets.OrderBy(o => o.Order))
                        {
                            <MudText>@workoutSet.UsedWeight kg x @workoutSet.NumberOfRepetitions</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter]
    public string SessionId { get; set; } = string.Empty;

    public GymSessionEntity? Session { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Session = await _gymSessionService.GetByIdAsync(SessionId);
    }
}

@page "/history"
@inject IUserAuthService _userAuthService
@inject IExerciseService _exerciseService
@inject ISessionExerciseService _sessionExerciseService

<PageTitle>History</PageTitle>

<MudText Typo="Typo.h3">Exercise History</MudText>

<LeekLoadingOverlay IsLoading="_isLoading">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.subtitle1">Check out your exercise history here!</MudText>
        </MudItem>

        <MudItem xs="12" md="6">
            <MudAutocomplete T="ExerciseEntity" Label="Exercise" ValueChanged="SetStats" Value="_selectedExercise" MaxItems="20"
                             SearchFunc="Search" ToStringFunc="@(e => e == null ? null : e.Title)" />
        </MudItem>

        <MudItem xs="12" md="6">
            <MudToggleGroup T="ExerciseStatisticDisplayMode" @bind-Value="_selectedDisplayMode">
                <MudToggleItem Value="ExerciseStatisticDisplayMode.Repetitions" />
                <MudToggleItem Value="ExerciseStatisticDisplayMode.Weight" />
                <MudToggleItem Value="ExerciseStatisticDisplayMode.Volume" />
            </MudToggleGroup>
        </MudItem>

        <MudItem xs="12">
            <MudTabs Elevation="2" ApplyEffectsToContainer="true" AlwaysShowScrollButtons="true">
                @foreach (SessionExerciseEntity sessionExercise in ExerciseEntries)
                {
                    <MudTabPanel Text="@sessionExercise.Session.Date.ToString("d")">
                        <MudChart ChartType="ChartType.Bar" ChartSeries="@GetChartSeries(sessionExercise)" XAxisLabels="@GetXAxisLabels(sessionExercise)" />
                    </MudTabPanel>
                }
            </MudTabs>
        </MudItem>
    </MudGrid>
</LeekLoadingOverlay>

@code {
    private bool _isLoading = false;

    private ExerciseStatisticDisplayMode _selectedDisplayMode = ExerciseStatisticDisplayMode.Weight;
    private ExerciseEntity? _selectedExercise;

    public UserEntity? CurrentUser { get; set; }
    public List<ExerciseEntity> Exercises { get; set; } = new();
    public List<SessionExerciseEntity> ExerciseEntries { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        try
        {
            CurrentUser = await _userAuthService.GetCurrentUserAsync();

            Exercises = await _exerciseService.GetAllAsync();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SetStats(ExerciseEntity? exercise)
    {
        _selectedExercise = exercise;

        if (_selectedExercise is not null && CurrentUser is not null)
        {
            ExerciseEntries = await _sessionExerciseService.GetAllByExerciseAsync(CurrentUser.Id, _selectedExercise.Id);
        }
    }

    private string[] GetXAxisLabels(SessionExerciseEntity sessionExercise)
    {
        return sessionExercise.Sets
            .OrderBy(o => o.Order)
            .Select(o => $"{o.CleanRepetitions}x{o.UsedWeight}kg")
            .ToArray();
    }

    private List<ChartSeries> GetChartSeries(SessionExerciseEntity sessionExercise)
    {
        return new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = _selectedDisplayMode.ToString(),
                Data = GetChartData(sessionExercise.Sets.OrderBy(o => o.Order))
            }
        };
    }

    private double[] GetChartData(IEnumerable<WorkoutSetEntity> sets)
    {
        return _selectedDisplayMode switch
        {
            ExerciseStatisticDisplayMode.Repetitions => sets.Select(o => (double)o.CleanRepetitions).ToArray(),
            ExerciseStatisticDisplayMode.Weight => sets.Select(o => o.UsedWeight).ToArray(),
            ExerciseStatisticDisplayMode.Volume => sets.Select(o => o.CleanRepetitions * o.UsedWeight).ToArray(),
            _ => throw new NotSupportedException($"Display mode '{_selectedDisplayMode}' is not supported")
        };
    }

    private async Task<IEnumerable<ExerciseEntity>> Search(string value)
    {
        return await _exerciseService.SearchAsync(value, Exercises);
    }
}

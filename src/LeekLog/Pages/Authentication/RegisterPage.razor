@page "/register"
@using LeekLog.Abstractions.Entites;
@using LeekLog.Abstractions.Models;
@using LeekLog.Authentication;
@using LeekLog.Data.Abstractions.Stores;
@using LeekLog.Services.Abstractions;
@inject NavigationManager _navManager
@inject IUserAuthService _userAuthService
@inject IUserStore _userStore
@inject IUserService _userService

<h1>Sign up</h1>

<div class="text-left">
    <AuthorizeView>
        <Authorized>
            <p>
                Come on, man ... you are logged in, why do you want to sign up a new account?<br />
                How did you even get here?
            </p>
        </Authorized>
        <NotAuthorized>
            <p>
                Enter a unique <i>(and cool)</i> user name and password to sign up to Leek Log!
            </p>

            <div class="form-container">
                <EditForm Model="this" Context="register" OnSubmit="RegisterAsync">
                    <label for="userName">User name:</label>
                    <InputText id="userName" @bind-Value="UserName" /><br />

                    <label for="password">Password:</label>
                    <InputText id="password" type="password" @bind-Value="Password" /><br />

                    <label for="passwordRepeat">Repeat Password:</label>
                    <InputText id="passwordRepeat" type="password" @bind-Value="PasswordRepeat" /><br />

                    <input type="submit" value="Register" />
                </EditForm>
            </div>

            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <br />

                <span class="text-danger">@ErrorMessage</span>
            }
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    public string UserName { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
    public string PasswordRepeat { get; set; } = string.Empty;
    public string? ErrorMessage { get; set; }

    public async Task RegisterAsync()
    {
        if (!string.Equals(Password, PasswordRepeat, StringComparison.Ordinal))
        {
            ErrorMessage = "Password didn't match password repetition";

            return;
        }

        UserCreationResult result = await _userService.TrySaveUserAsync(UserName, Password);

        if (result.Success == false)
        {
            ErrorMessage = result.ErrorMessage;

            return;
        }

        await _userAuthService.LoginAsync(result.CreatedUser);

        _navManager.NavigateTo("/");
    }
}

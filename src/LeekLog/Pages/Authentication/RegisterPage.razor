@page "/register"
@inject NavigationManager _navManager
@inject IUserAuthService _userAuthService
@inject IUserService _userService

<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h3">Sign up</MudText>

<MudGrid>
    <AuthorizeView>
        <Authorized>
            <MudItem>
                <MudAlert Severity="Severity.Warning">
                    Come on, man ... you are logged in, why do you want to sign up a new account?<br />
                    How did you even get here?
                </MudAlert>
            </MudItem>
        </Authorized>
        <NotAuthorized>
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle1">
                    Enter a unique <i>(and cool)</i> user name and password to sign up to Leek Log!
                </MudText>
            </MudItem>

            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudForm Model="CreateModel">
                        <MudTextField Label="User name" Required="true" @bind-Value="CreateModel.UserName" />
                        <MudTextField Label="Password" InputType="InputType.Password" Required="true" @bind-Value="CreateModel.Password" />
                        <MudTextField Label="Repeat password" InputType="InputType.Password" Required="true" @bind-Value="CreateModel.PasswordRepeat" />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RegisterAsync">Register</MudButton>
                    </MudForm>
                </MudPaper>
            </MudItem>

            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Error">@ErrorMessage</MudAlert>
                </MudItem>
            }
        </NotAuthorized>
    </AuthorizeView>
</MudGrid>

@code {
    public UserCreateModel CreateModel { get; set; } = new();
    public string? ErrorMessage { get; set; }

    public async Task RegisterAsync()
    {
        UserCreationResult result = await _userService.TrySaveUserAsync(CreateModel);

        if (result.Success == false)
        {
            ErrorMessage = result.ErrorMessage;

            return;
        }

        await _userAuthService.LoginAsync(result.CreatedUser);

        _navManager.NavigateTo("/");
    }
}
